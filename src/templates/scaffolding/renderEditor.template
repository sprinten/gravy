<%
    if (property.type == Boolean || property.type == boolean)
        out << renderBooleanEditor(domainClass, property)
    else if (property.type && Number.isAssignableFrom(property.type) || (property.type?.isPrimitive() && property.type != boolean))
        out << renderNumberEditor(domainClass, property)
    else if (property.type == String)
        out << renderStringEditor(domainClass, property)
    else if (property.type == Date || property.type == java.sql.Date || property.type == java.sql.Time || property.type == Calendar)
        out << renderDateEditor(domainClass, property)
    else if (property.type == URL)
        out << renderStringEditor(domainClass, property)
    else if (property.type && property.isEnum())
        out << renderEnumEditor(domainClass, property)
    else if (property.type == TimeZone)
        out << renderSelectTypeEditor("timeZone", domainClass, property)
    else if (property.type == Locale)
        out << renderSelectTypeEditor("locale", domainClass, property)
    else if (property.type == Currency)
        out << renderSelectTypeEditor("currency", domainClass, property)
    else if (property.type==([] as Byte[]).class)
        //TODO: Bug in groovy means i have to do this :(
        out << renderByteArrayEditor(domainClass, property)
    else if (property.type==([] as byte[]).class)
        //TODO: Bug in groovy means i have to do this :(
        out << renderByteArrayEditor(domainClass, property)
    else if (property.manyToOne || property.oneToOne)
        out << renderManyToOne(domainClass, property)
    else if ((property.oneToMany && !property.bidirectional) || (property.manyToMany && property.isOwningSide())) {
        def str = renderManyToMany(domainClass, property)
        if(str != null) {
            out << str
        }
    }
    else if (property.oneToMany)
        out << renderOneToMany(domainClass, property)

    private renderEnumEditor(domainClass, property) {
		def sb = new StringBuilder("")
        sb << '<g:select class="form-control" name="' << propertyFormName << '"'
 		sb << ' from="${' << "${property.type.name}?.values()" << '}"'
 		sb << ' keys="${' << property.type.name << '.values()*.name()}"'
		if (isRequired()) sb << ' required=""'
		sb << ' value="${' << simpleFormValue() << '?.name()}"'
		sb << renderNoSelection(property)
		sb << '/>'
		sb as String
    }

    private renderStringEditor(domainClass, property) {
        if (!cp) {
            return "<g:textField class='form-control' name=\"${propertyFormName}\" value=\"${propertyFormValue}\" />"
        } else {
			def sb = new StringBuilder("")
            if ("textarea" == cp.widget || (cp.maxSize > 250 && !cp.password && !cp.inList)) {
                sb << '<g:textArea class="form-control" name="' << propertyFormName << '"'
 				sb << ' cols="40" rows="5"'
				if (cp.maxSize) sb << ' maxlength="' << cp.maxSize << '"'
				if (isRequired()) sb << ' required=""'
 				sb << ' value="' << propertyFormValue << '"'
				sb << '/>'
            } else if (cp.inList) {
				sb << '<g:select class="form-control" name="' << propertyFormName << '"'
				sb << ' from="${' << "${propertyConstraints}[\"${property.name}\"]?.inList" << '}"'
				if (isRequired()) sb << ' required=""'
				sb << ' value="' << propertyFormValue << '"'
				sb << ' valueMessagePrefix="' << "${propertyFormName}" << '"'
				sb << renderNoSelection(property)
				sb << '/>'
			} else {
				if (cp.password) {
					sb << '<g:field class="form-control" type="password"'
				} else if (cp.url) {
					sb << '<g:field class="form-control" type="url"'
				} else if (cp.email) {
					sb << '<g:field class="form-control" type="email"'
				} else {
					sb << '<g:textField class="form-control"'
				}
				sb << ' name="' << property.name << '"'
				if (cp.maxSize) sb << ' maxlength="' << cp.maxSize << '"'
				if (!cp.editable) sb << ' readonly="readonly"'
				if (cp.matches) sb << ' pattern="${' << "${propertyConstraints}[\"${property.name}\"]?.matches" << '}"'
				if (isRequired()) sb << ' required=""'
				sb << ' value="' << propertyFormValue << '"'
				sb << '/>'
			}
			sb as String
        }
    }

    private renderByteArrayEditor(domainClass, property) {
        return "<input type=\"file\" id=\"${propertyFormName}\" name=\"${propertyFormName}\" />"
    }

    private renderManyToOne(domainClass,property) {
        if (property.association) {
			def sb = new StringBuilder()
            sb << '<g:select class="form-control"'
			// id is "x" and name is "x.id" as the label will have for="x" and "." in an id will confuse CSS
 			sb << ' id="' << propertyFormName << '"'
 			sb << ' name="' << propertyFormName << '.id"'
 			sb << ' from="${' << property.type.name << '.list()}"'
 			sb << ' optionKey="id"'
			if (isRequired()) sb << ' required=""'
 			sb << ' value="${' << simpleFormValue() << '?.id}"'
 			sb << renderNoSelection(property)
 			sb << '/>'
			sb as String
        }
    }

    private renderManyToMany(domainClass, property) {
        def cls = property.referencedDomainClass?.clazz
        if(cls == null) {
            if(property.type instanceof Collection) {
                cls = org.springframework.core.GenericCollectionTypeResolver.getCollectionType(property.type)
            }
        }

        if(cls != null) {
            def sb = new StringBuilder()
            sb << '<g:select class="form-control" name="' << propertyFormName << '"'
            sb << ' from="${' << cls.name << '.list()}"'
            sb << ' multiple="multiple"'
            sb << ' optionKey="id"'
            sb << ' size="5"'
            if (isRequired()) sb << ' required=""'
            sb << ' value="${' << propertyFormName << '*.id}"'
            sb << ' class="many-to-many"'
            sb << '/>'
            sb as String

        }

    }

    private renderOneToMany(domainClass, property) {
        def sw = new StringWriter()
        def pw = new PrintWriter(sw)
        pw.println()
        pw.println '<ul class="one-to-many">'
        pw.println "<g:each in=\"${propertyFormValue}\" var=\"${property.name[0]}\">"
        pw.println "    <li><g:link controller=\"${property.referencedDomainClass.propertyName}\" action=\"show\" id=\"\${${property.name[0]}.id}\">\${${property.name[0]}?.encodeAsHTML()}</g:link></li>"
        pw.println '</g:each>'
		pw.println '<li class="add">'
        pw.println "<g:link controller=\"${property.referencedDomainClass.propertyName}\" action=\"create\" params=\"['${propertyFormName}.id': ${domainInstance}?.id]\">\${message(code: 'default.add.label', args: [message(code: '${property.referencedDomainClass.propertyName}.label', default: '${property.referencedDomainClass.shortName}')])}</g:link>"
		pw.println '</li>'
        pw.println '</ul>'
        return sw.toString()
    }

    private renderNumberEditor(domainClass, property) {
        if (!cp) {
            if (property.type == Byte) {
                return "<g:select class='form-control' name=\"${propertyFormName}\" from=\"\${-128..127}\" class=\"range\" value=\"${propertyFormValue}\" />"
            } else {
                return "<g:field class='form-control' type=\"number\" name=\"${propertyFormName}\" value=\"${propertyFormValue}\" />"
            }
        } else {
	        def sb = new StringBuilder()
            if (cp.range) {
                sb << '<g:select class="form-control" name="' << propertyFormName << '"'
 				sb << ' from="${' << "${cp.range.from}..${cp.range.to}" << '}"'
 				sb << ' class="range"'
				if (isRequired()) sb << ' required=""'
					sb << ' value="' << propertyFormValue << '"'
				sb << renderNoSelection(property)
				sb << '/>'
            } else if (cp.inList) {
                sb << '<g:select class="form-control" name="' << propertyFormName << '"'
 				sb << ' from="${' << "${propertyConstraints}[\"${property.name}\"]?.inList" << '}"'
				if (isRequired()) sb << ' required=""'
					sb << ' value="' << propertyFormValue << '"'
				sb << ' valueMessagePrefix="' << "${propertyFormName}" << '"'
				sb << renderNoSelection(property)
				sb << '/>'
            } else {
				sb << '<g:field class="form-control"'
				sb << ' name="' << propertyFormName << '"'
				if (property.type in [float, double, Float, Double, BigDecimal]) {
					sb << ' value="' << propertyFormValue << '"'
				} else {
					sb << ' type="number"'
					if (cp.min != null) sb << ' min="' << cp.min << '"'
					if (cp.max != null) sb << ' max="' << cp.max << '"'
					sb << ' value="' << propertyFormValue << '"'
				}
				if (isRequired()) sb << ' required=""'
				sb << '/>'
            }
			sb as String
        }
     }

    private renderBooleanEditor(domainClass, property) {
        boolean toggle = domainClass.clazz.getDeclaredField(property.name)?.getAnnotation(grady.annotations.Toggle.class) != null

        if (!cp && !toogle) {
            return "<bs:checkBox name=\"${propertyFormName}\" value=\"${propertyFormValue}\" />"
        } else {
            def sb = new StringBuilder("<bs:checkBox name=\"${propertyFormName}\" ")

            if (cp) {
                if (cp.widget)
                    sb << "widget=\"${cp.widget}\" ";

                cp.attributes.each { k, v ->
                    sb << "${k}=\"${v}\" "
                }
            }

            if (toggle) {
                sb << "toggle=\"${toggle}\" ";
            }

            sb << "value=\"${propertyFormValue}\" />"
            return sb.toString()
        }
    }

    private renderDateEditor(domainClass, property) {
        def precision = (property.type == Date || property.type == java.sql.Date || property.type == Calendar) ? "day" : "minute";
        if (!cp) {
            return "<bs:customDatePicker class=\"form-control\" name=\"${propertyFormName}\" precision=\"${precision}\" value=\"${propertyFormValue}\" />"
        } else {
            if (!cp.editable) {
                return "${propertyFormValue}"
            } else {
                def sb = new StringBuilder("<bs:customDatePicker class=\"form-control\" name=\"${propertyFormName}\" ")
                if (cp.format) sb << "format=\"${cp.format}\" "
                if (cp.widget) sb << "widget=\"${cp.widget}\" "
                cp.attributes.each { k, v ->
                    sb << "${k}=\"${v}\" "
                }
                if (!cp.attributes.precision) {
                    sb << "precision=\"${precision}\" "
                }
                sb << " value=\"${propertyFormValue}\" ${renderNoSelection(property)} />"

                return sb.toString()
            }
        }
    }

    private renderSelectTypeEditor(type, domainClass,property) {
        if (!cp) {
            return "<g:${type}Select class='form-control' name=\"${propertyFormName}\" value=\"${propertyFormValue}\" />"
        } else {
            def sb = new StringBuilder("<g:${type}Select class='form-control' name=\"${propertyFormName}\" ")
            if (cp.widget) sb << "widget=\"${cp.widget}\" ";
            cp.attributes.each { k, v ->
                sb << "${k}=\"${v}\" "
            }
            sb << "value=\"${propertyFormValue}\" ${renderNoSelection(property)} />"
            return sb.toString()
        }
    }

    private renderNoSelection(property) {
        if (isOptional()) {
            if (property.manyToOne || property.oneToOne) {
                return " noSelection=\"['null': '']\""
            } else if (property.type == Date || property.type == java.sql.Date || property.type == java.sql.Time || property.type == Calendar) {
                return "default=\"none\" noSelection=\"['': '']\""
            } else {
                return " noSelection=\"['': '']\""
            }
        }
        return ""
    }

	private boolean isRequired() {
		!isOptional()
	}

	private boolean isOptional() {
	    if(!cp) {
	        return false
	    }
	    else {
	        cp.nullable || (cp.propertyType == String && cp.blank) || cp.propertyType in [boolean, Boolean]
	    }
	}

	private String simpleFormValue() {
	    def value = propertyFormValue.replace("\$","")
	    value = value.replace("{","")
	    value = value.replace("}","")
	    return value
	}
%>